// Generated by purs bundle 0.14.2
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };
  exports["Apply"] = Apply;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];    
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["Bind"] = Bind;
  exports["join"] = join;
})(PS);
(function(exports) {
  "use strict";

  var replicateFill = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };   

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  //------------------------------------------------------------------------------
  // Folding ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.any = function (p) {
    return function (xs) {
      var len = xs.length;
      for (var i = 0; i < len; i++) {
        if (p(xs[i])) return true;
      }
      return false;
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS);
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldableArray"] = foldableArray;
})(PS);
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq; 
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.eqStringImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqString"] = eqString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];                
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                         
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 126, column 1 - line 128, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["functorMaybe"] = functorMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["eqMaybe"] = eqMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var take = function (n) {
      return function (xs) {
          var $67 = n < 1;
          if ($67) {
              return [  ];
          };
          return $foreign.slice(0)(n)(xs);
      };
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var foldl = Data_Foldable.foldl(Data_Foldable.foldableArray);
  exports["index"] = index;
  exports["foldl"] = foldl;
  exports["take"] = take;
  exports["replicate"] = $foreign.replicate;
  exports["length"] = $foreign.length;
  exports["any"] = $foreign.any;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];                
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
})(PS);
(function(exports) {
  "use strict";

  exports.mapWithIndexArray = function (f) {
    return function (xs) {
      var l = xs.length;
      var result = Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(i)(xs[i]);
      }
      return result;
    };
  };
})(PS["Data.FunctorWithIndex"] = PS["Data.FunctorWithIndex"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.FunctorWithIndex"] = $PS["Data.FunctorWithIndex"] || {};
  var exports = $PS["Data.FunctorWithIndex"];
  var $foreign = $PS["Data.FunctorWithIndex"];
  var Data_Functor = $PS["Data.Functor"];          
  var FunctorWithIndex = function (Functor0, mapWithIndex) {
      this.Functor0 = Functor0;
      this.mapWithIndex = mapWithIndex;
  };
  var mapWithIndex = function (dict) {
      return dict.mapWithIndex;
  };
  var functorWithIndexArray = new FunctorWithIndex(function () {
      return Data_Functor.functorArray;
  }, $foreign.mapWithIndexArray);
  exports["mapWithIndex"] = mapWithIndex;
  exports["functorWithIndexArray"] = functorWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  exports["Tuple"] = Tuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.FoldableWithIndex"] = $PS["Data.FoldableWithIndex"] || {};
  var exports = $PS["Data.FoldableWithIndex"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];              
  var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
      this.Foldable0 = Foldable0;
      this.foldMapWithIndex = foldMapWithIndex;
      this.foldlWithIndex = foldlWithIndex;
      this.foldrWithIndex = foldrWithIndex;
  };
  var foldrWithIndex = function (dict) {
      return dict.foldrWithIndex;
  };
  var foldlWithIndex = function (dict) {
      return dict.foldlWithIndex;
  };
  var foldMapWithIndexDefaultR = function (dictFoldableWithIndex) {
      return function (dictMonoid) {
          return function (f) {
              return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                  return function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(f(i)(x))(acc);
                      };
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableWithIndexArray = new FoldableWithIndex(function () {
      return Data_Foldable.foldableArray;
  }, function (dictMonoid) {
      return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
  }, function (f) {
      return function (z) {
          var $163 = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (y) {
              return function (v) {
                  return f(v.value0)(y)(v.value1);
              };
          })(z);
          var $164 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Data_Tuple.Tuple.create);
          return function ($165) {
              return $163($164($165));
          };
      };
  }, function (f) {
      return function (z) {
          var $166 = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
              return function (y) {
                  return f(v.value0)(v.value1)(y);
              };
          })(z);
          var $167 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Data_Tuple.Tuple.create);
          return function ($168) {
              return $166($167($168));
          };
      };
  });
  var findWithIndex = function (dictFoldableWithIndex) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  return function (v2) {
                      if (v1 instanceof Data_Maybe.Nothing && p(v)(v2)) {
                          return new Data_Maybe.Just({
                              index: v,
                              value: v2
                          });
                      };
                      return v1;
                  };
              };
          };
          return foldlWithIndex(dictFoldableWithIndex)(go)(Data_Maybe.Nothing.value);
      };
  };
  exports["findWithIndex"] = findWithIndex;
  exports["foldableWithIndexArray"] = foldableWithIndexArray;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  var heytingAlgebraFunction = function (dictHeytingAlgebra) {
      return new HeytingAlgebra(function (f) {
          return function (g) {
              return function (a) {
                  return conj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (g) {
              return function (a) {
                  return disj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (v) {
          return ff(dictHeytingAlgebra);
      }, function (f) {
          return function (g) {
              return function (a) {
                  return implies(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (a) {
              return not(dictHeytingAlgebra)(f(a));
          };
      }, function (v) {
          return tt(dictHeytingAlgebra);
      });
  };
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
  exports["heytingAlgebraFunction"] = heytingAlgebraFunction;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var even = function (x) {
      return (x & 1) === 0;
  };
  exports["even"] = even;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };                                                                                                 
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 176, column 3 - line 179, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  exports["min"] = min;
  exports["max"] = max;
  exports["ordInt"] = ordInt;
})(PS);
(function(exports) {
  "use strict";

  exports.length = function (s) {
    return s.length;
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.splitAt = function (i) {
    return function (s) {
      return { before: s.substring(0, i), after: s.substring(i) };
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  var Data_Maybe = $PS["Data.Maybe"];
  var stripSuffix = function (v) {
      return function (str) {
          var v1 = $foreign.splitAt($foreign.length(str) - $foreign.length(v) | 0)(str);
          var $9 = v1.after === v;
          if ($9) {
              return new Data_Maybe.Just(v1.before);
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var stripPrefix = function (v) {
      return function (str) {
          var v1 = $foreign.splitAt($foreign.length(v))(str);
          var $15 = v1.before === v;
          if ($15) {
              return new Data_Maybe.Just(v1.after);
          };
          return Data_Maybe.Nothing.value;
      };
  };                                                                                                   
  var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var contains = function (pat) {
      var $20 = indexOf(pat);
      return function ($21) {
          return Data_Maybe.isJust($20($21));
      };
  };
  exports["stripPrefix"] = stripPrefix;
  exports["stripSuffix"] = stripSuffix;
  exports["contains"] = contains;
})(PS);
(function(exports) {
  "use strict";

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];
  exports["split"] = $foreign.split;
  exports["joinWith"] = $foreign.joinWith;
})(PS);
(function(exports) {
  "use strict";

  exports.regexImpl = function (left) {
    return function (right) {
      return function (s1) {
        return function (s2) {
          try {
            return right(new RegExp(s1, s2));
          } catch (e) {
            return left(e.message);
          }
        };
      };
    };
  };

  exports.test = function (r) {
    return function (s) {
      var lastIndex = r.lastIndex;
      var result = r.test(s);
      r.lastIndex = lastIndex;
      return result;
    };
  };

  exports.replace = function (r) {
    return function (s1) {
      return function (s2) {
        return s2.replace(r, s1);
      };
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.String.Regex"] = $PS["Data.String.Regex"] || {};
  var exports = $PS["Data.String.Regex"];
  var $foreign = $PS["Data.String.Regex"];
  var Data_Either = $PS["Data.Either"];                                                        
  var renderFlags = function (v) {
      return (function () {
          if (v.value0.global) {
              return "g";
          };
          return "";
      })() + ((function () {
          if (v.value0.ignoreCase) {
              return "i";
          };
          return "";
      })() + ((function () {
          if (v.value0.multiline) {
              return "m";
          };
          return "";
      })() + ((function () {
          if (v.value0.dotAll) {
              return "s";
          };
          return "";
      })() + ((function () {
          if (v.value0.sticky) {
              return "y";
          };
          return "";
      })() + (function () {
          if (v.value0.unicode) {
              return "u";
          };
          return "";
      })()))));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign.regexImpl(Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
      };
  };
  exports["regex"] = regex;
  exports["test"] = $foreign.test;
  exports["replace"] = $foreign.replace;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.String.Regex.Flags"] = $PS["Data.String.Regex.Flags"] || {};
  var exports = $PS["Data.String.Regex.Flags"];                      
  var RegexFlags = (function () {
      function RegexFlags(value0) {
          this.value0 = value0;
      };
      RegexFlags.create = function (value0) {
          return new RegexFlags(value0);
      };
      return RegexFlags;
  })();
  var noFlags = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      dotAll: false,
      sticky: false,
      unicode: false
  });
  exports["noFlags"] = noFlags;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports._unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function (dictPartial) {
      return $foreign["_crashWith"];
  };
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartial = $foreign["_unsafePartial"];
  var unsafeCrashWith = function (msg) {
      return unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.String.Regex.Unsafe"] = $PS["Data.String.Regex.Unsafe"] || {};
  var exports = $PS["Data.String.Regex.Unsafe"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                
  var unsafeRegex = function (s) {
      return function (f) {
          return Data_Either.either(Partial_Unsafe.unsafeCrashWith)(Control_Category.identity(Control_Category.categoryFn))(Data_String_Regex.regex(s)(f));
      };
  };
  exports["unsafeRegex"] = unsafeRegex;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
})(PS);
(function($PS) {
  "use strict";
  $PS["TopLevel"] = $PS["TopLevel"] || {};
  var exports = $PS["TopLevel"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Data_String_Regex_Unsafe = $PS["Data.String.Regex.Unsafe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Console = $PS["Effect.Console"];                
  var Module = (function () {
      function Module(value0) {
          this.value0 = value0;
      };
      Module.create = function (value0) {
          return new Module(value0);
      };
      return Module;
  })();
  var ImportOpen = (function () {
      function ImportOpen(value0) {
          this.value0 = value0;
      };
      ImportOpen.create = function (value0) {
          return new ImportOpen(value0);
      };
      return ImportOpen;
  })();
  var Import = (function () {
      function Import(value0) {
          this.value0 = value0;
      };
      Import.create = function (value0) {
          return new Import(value0);
      };
      return Import;
  })();
  var SingleLineComment = (function () {
      function SingleLineComment(value0) {
          this.value0 = value0;
      };
      SingleLineComment.create = function (value0) {
          return new SingleLineComment(value0);
      };
      return SingleLineComment;
  })();
  var MultiLineCommentSingle = (function () {
      function MultiLineCommentSingle(value0) {
          this.value0 = value0;
      };
      MultiLineCommentSingle.create = function (value0) {
          return new MultiLineCommentSingle(value0);
      };
      return MultiLineCommentSingle;
  })();
  var MultiLineCommentStart = (function () {
      function MultiLineCommentStart(value0) {
          this.value0 = value0;
      };
      MultiLineCommentStart.create = function (value0) {
          return new MultiLineCommentStart(value0);
      };
      return MultiLineCommentStart;
  })();
  var MultiLineCommentEnd = (function () {
      function MultiLineCommentEnd(value0) {
          this.value0 = value0;
      };
      MultiLineCommentEnd.create = function (value0) {
          return new MultiLineCommentEnd(value0);
      };
      return MultiLineCommentEnd;
  })();
  var Type = (function () {
      function Type(value0) {
          this.value0 = value0;
      };
      Type.create = function (value0) {
          return new Type(value0);
      };
      return Type;
  })();
  var Decl = (function () {
      function Decl(value0) {
          this.value0 = value0;
      };
      Decl.create = function (value0) {
          return new Decl(value0);
      };
      return Decl;
  })();
  var Foreign = (function () {
      function Foreign(value0) {
          this.value0 = value0;
      };
      Foreign.create = function (value0) {
          return new Foreign(value0);
      };
      return Foreign;
  })();
  var Fun = (function () {
      function Fun(value0) {
          this.value0 = value0;
      };
      Fun.create = function (value0) {
          return new Fun(value0);
      };
      return Fun;
  })();
  var NonTop = (function () {
      function NonTop(value0) {
          this.value0 = value0;
      };
      NonTop.create = function (value0) {
          return new NonTop(value0);
      };
      return NonTop;
  })();
  var Empty = (function () {
      function Empty() {

      };
      Empty.value = new Empty();
      return Empty;
  })();
  var typeKeywords = Data_Functor.map(Data_Functor.functorArray)(Data_Function.flip(Data_Semigroup.append(Data_Semigroup.semigroupString))(" "))([ "data", "newtype", "type", "class" ]);
  var trimEnd = (function () {
      var re = Data_String_Regex_Unsafe.unsafeRegex("\\s+$")(Data_String_Regex_Flags.noFlags);
      return Data_String_Regex.replace(re)("");
  })();
  var startsWith = function (prefix) {
      var $131 = Data_String_CodeUnits.stripPrefix(prefix);
      return function ($132) {
          return Data_Maybe.isJust($131($132));
      };
  };
  var startsWithAny = function (opts) {
      return function (str) {
          return Data_Array.any(Data_Function.flip(startsWith)(str))(opts);
      };
  };
  var main = Effect_Console.log("Top Level Format");
  var isSingleComment = function (cl) {
      if (cl instanceof SingleLineComment) {
          return true;
      };
      return false;
  };
  var isQualifiedImport = function (cl) {
      if (cl instanceof Import) {
          return true;
      };
      return false;
  };
  var isOpenImport = function (cl) {
      if (cl instanceof ImportOpen) {
          return true;
      };
      return false;
  };
  var isMultiCommentEnd = function (cl) {
      if (cl instanceof MultiLineCommentEnd) {
          return true;
      };
      return false;
  };
  var isFunTypeDecl = function (line) {
      if (line instanceof Fun) {
          return Data_String_Regex.test(Data_String_Regex_Unsafe.unsafeRegex("^[\\S]+\\s?(::|\u2237)")(Data_String_Regex_Flags.noFlags))(line.value0);
      };
      return false;
  };
  var isFun = function (v) {
      if (v instanceof Fun) {
          return true;
      };
      return false;
  };
  var isCommentEnd = function (cl) {
      if (cl instanceof MultiLineCommentEnd) {
          return true;
      };
      if (cl instanceof MultiLineCommentSingle) {
          return true;
      };
      return false;
  };
  var initState = function (codeLines) {
      return {
          result: [  ],
          index: 0,
          blanks: 0,
          nonTops: 0,
          prevLine: Empty.value,
          prevTopIdentifier: "",
          hasImportOpen: false,
          hasImport: false,
          isCommented: false,
          isMultiLineStr: false,
          codeLines: codeLines
      };
  };

  /**
 *  Should contain odd number of triple quotes.  
 */  
  var hasMultiLineQuotes = (function () {
      var $133 = Data_String_Common.split("\"\"\"");
      return function ($134) {
          return Data_Int.even(Data_Array.length($133($134)));
      };
  })();
  var getTopIdentifier = function (cl) {
      if (cl instanceof Fun) {
          return Data_Maybe.Just.create(Data_String_Common.joinWith(" ")(Data_Array.take(1)(Data_String_Common.split(" ")(cl.value0))));
      };
      if (cl instanceof Type) {
          return Data_Maybe.Just.create(Data_String_Common.joinWith(" ")(Data_Array.take(2)(Data_String_Common.split(" ")(cl.value0))));
      };
      return Data_Maybe.Nothing.value;
  };
  var getNextNonMultiCommentLine = function (v) {
      var commentEnd = Data_Function.flip(Data_FoldableWithIndex.findWithIndex(Data_FoldableWithIndex.foldableWithIndexArray))(v.codeLines)(function (i) {
          return function (codeL) {
              return i > v.index && isMultiCommentEnd(codeL);
          };
      });
      return Control_Bind.join(Data_Maybe.bindMaybe)(Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(commentEnd)(function (found) {
          return Data_Array.index(v.codeLines)(found.index + 1 | 0);
      }));
  };
  var isNextNonMultiCommentLineEmpty = function (st) {
      var v = getNextNonMultiCommentLine(st);
      if (v instanceof Data_Maybe.Nothing) {
          return true;
      };
      if (v instanceof Data_Maybe.Just && v.value0 instanceof Empty) {
          return true;
      };
      return false;
  };
  var getNextNonCommentLine = function (v) {
      var res = Data_Function.flip(Data_FoldableWithIndex.findWithIndex(Data_FoldableWithIndex.foldableWithIndexArray))(v.codeLines)(function (i) {
          return function (codeL) {
              return i > v.index && !isSingleComment(codeL);
          };
      });
      return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(res)(function (found) {
          return found.value;
      });
  };
  var isNextNonCommentLineEmpty = function (st) {
      var v = getNextNonCommentLine(st);
      if (v instanceof Data_Maybe.Nothing) {
          return true;
      };
      if (v instanceof Data_Maybe.Just && v.value0 instanceof Empty) {
          return true;
      };
      return false;
  };
  var getCodeLineStr = function (codeL) {
      if (codeL instanceof Module) {
          return codeL.value0;
      };
      if (codeL instanceof ImportOpen) {
          return codeL.value0;
      };
      if (codeL instanceof Import) {
          return codeL.value0;
      };
      if (codeL instanceof SingleLineComment) {
          return codeL.value0;
      };
      if (codeL instanceof MultiLineCommentSingle) {
          return codeL.value0;
      };
      if (codeL instanceof MultiLineCommentStart) {
          return codeL.value0;
      };
      if (codeL instanceof MultiLineCommentEnd) {
          return codeL.value0;
      };
      if (codeL instanceof Type) {
          return codeL.value0;
      };
      if (codeL instanceof Decl) {
          return codeL.value0;
      };
      if (codeL instanceof Foreign) {
          return codeL.value0;
      };
      if (codeL instanceof Fun) {
          return codeL.value0;
      };
      if (codeL instanceof NonTop) {
          return codeL.value0;
      };
      if (codeL instanceof Empty) {
          return "";
      };
      throw new Error("Failed pattern match at TopLevel (line 65, column 3 - line 78, column 16): " + [ codeL.constructor.name ]);
  };
  var eqCodeLine = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Module && y instanceof Module) {
              return x.value0 === y.value0;
          };
          if (x instanceof ImportOpen && y instanceof ImportOpen) {
              return x.value0 === y.value0;
          };
          if (x instanceof Import && y instanceof Import) {
              return x.value0 === y.value0;
          };
          if (x instanceof SingleLineComment && y instanceof SingleLineComment) {
              return x.value0 === y.value0;
          };
          if (x instanceof MultiLineCommentSingle && y instanceof MultiLineCommentSingle) {
              return x.value0 === y.value0;
          };
          if (x instanceof MultiLineCommentStart && y instanceof MultiLineCommentStart) {
              return x.value0 === y.value0;
          };
          if (x instanceof MultiLineCommentEnd && y instanceof MultiLineCommentEnd) {
              return x.value0 === y.value0;
          };
          if (x instanceof Type && y instanceof Type) {
              return x.value0 === y.value0;
          };
          if (x instanceof Decl && y instanceof Decl) {
              return x.value0 === y.value0;
          };
          if (x instanceof Foreign && y instanceof Foreign) {
              return x.value0 === y.value0;
          };
          if (x instanceof Fun && y instanceof Fun) {
              return x.value0 === y.value0;
          };
          if (x instanceof NonTop && y instanceof NonTop) {
              return x.value0 === y.value0;
          };
          if (x instanceof Empty && y instanceof Empty) {
              return true;
          };
          return false;
      };
  });
  var foldFormat = function (opts) {
      return function (state) {
          return function (codeL) {
              var str = getCodeLineStr(codeL);
              var nextIndex = state.index + 1 | 0;
              var $101 = Data_Eq.eq(eqCodeLine)(codeL)(Empty.value);
              if ($101) {
                  return {
                      result: state.result,
                      hasImportOpen: state.hasImportOpen,
                      hasImport: state.hasImport,
                      isCommented: state.isCommented,
                      isMultiLineStr: state.isMultiLineStr,
                      prevTopIdentifier: state.prevTopIdentifier,
                      prevLine: state.prevLine,
                      blanks: state.blanks + 1 | 0,
                      nonTops: state.nonTops,
                      index: nextIndex,
                      codeLines: state.codeLines
                  };
              };
              var topId = getTopIdentifier(codeL);
            
              // sameId means previous was type annotation
  var sameId = Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqString))(topId)(new Data_Maybe.Just(state.prevTopIdentifier));
              var isPrevOneLine = (state.blanks + state.nonTops | 0) === 0;
              var isPrevLineSingleComment = isSingleComment(state.prevLine);
              var isPrevLineNearbyComment = isPrevLineSingleComment && state.blanks === 0;
              var isPrevImport = isQualifiedImport(state.prevLine) || isOpenImport(state.prevLine);
              var isPrevEmpty = Data_Eq.eq(eqCodeLine)(state.prevLine)(Empty.value);
              var isPrevCommentEnd = function (v) {
                  return isPrevLineNearbyComment || isCommentEnd(state.prevLine);
              };
              var commentAdd = (function () {
                  if (isPrevImport) {
                      return Data_Ord.max(Data_Ord.ordInt)(2)(Data_Ord.min(Data_Ord.ordInt)(3)(state.blanks));
                  };
                  return 2;
              })();
              var addBefore = (function () {
                  var $104 = state.isCommented || state.isMultiLineStr;
                  if ($104) {
                      return state.blanks;
                  };
                  if (codeL instanceof Module) {
                      return 0;
                  };
                  if (codeL instanceof ImportOpen) {
                      if (state.hasImportOpen) {
                          return 0;
                      };
                      return 2;
                  };
                  if (codeL instanceof Import) {
                      var $109 = state.hasImport || isPrevCommentEnd(Data_Unit.unit);
                      if ($109) {
                          return 0;
                      };
                      if (state.hasImportOpen) {
                          return 1;
                      };
                      return 2;
                  };
                  if (codeL instanceof MultiLineCommentSingle) {
                      if (isPrevEmpty) {
                          return 0;
                      };
                      return commentAdd;
                  };
                  if (codeL instanceof SingleLineComment) {
                      if (isPrevOneLine) {
                          return 0;
                      };
                      if (state.blanks > 0 && isNextNonCommentLineEmpty(state)) {
                          return opts.linesBeforeSingleComment;
                      };
                      if (state.blanks === 0 && isNextNonCommentLineEmpty(state)) {
                          return 0;
                      };
                      if (Data_Boolean.otherwise) {
                          return commentAdd;
                      };
                  };
                  if (codeL instanceof MultiLineCommentStart) {
                      if (isPrevEmpty) {
                          return 0;
                      };
                      if (state.blanks > 0 && isNextNonMultiCommentLineEmpty(state)) {
                          return 2;
                      };
                      if (Data_Boolean.otherwise) {
                          return 2;
                      };
                  };
                  if (codeL instanceof Type) {
                      var $116 = sameId || (isPrevOneLine || isPrevCommentEnd(Data_Unit.unit));
                      if ($116) {
                          return 0;
                      };
                      return 2;
                  };
                  if (codeL instanceof Decl) {
                      var $118 = isPrevOneLine || isPrevCommentEnd(Data_Unit.unit);
                      if ($118) {
                          return 0;
                      };
                      return 2;
                  };
                  if (codeL instanceof Fun) {
                      var $120 = sameId || (state.blanks === 0 && (isFun(state.prevLine) && Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(isFunTypeDecl)(codeL)) || isPrevCommentEnd(Data_Unit.unit) && state.blanks === 0);
                      if ($120) {
                          return 0;
                      };
                      return 2;
                  };
                  if (codeL instanceof NonTop) {
                      return Data_Ord.min(Data_Ord.ordInt)(state.blanks)(1);
                  };
                  if (codeL instanceof Empty) {
                      return 0;
                  };
                  return 0;
              })();
              return {
                  result: Data_Semigroup.append(Data_Semigroup.semigroupArray)(state.result)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(addBefore)("\x0a"))([ str + "\x0a" ])),
                  hasImportOpen: state.hasImportOpen || Data_Eq.eq(eqCodeLine)(codeL)(new ImportOpen(str)),
                  hasImport: state.hasImport || Data_Eq.eq(eqCodeLine)(codeL)(new Import(str)),
                  isCommented: (function () {
                      if (codeL instanceof MultiLineCommentStart) {
                          return true;
                      };
                      if (codeL instanceof MultiLineCommentEnd) {
                          return false;
                      };
                      return state.isCommented;
                  })(),
                  isMultiLineStr: (function () {
                      if (state.isCommented) {
                          return state.isMultiLineStr;
                      };
                      var $127 = hasMultiLineQuotes(str);
                      if ($127) {
                          return !state.isMultiLineStr;
                      };
                      return state.isMultiLineStr;
                  })(),
                  prevTopIdentifier: Data_Maybe.fromMaybe(state.prevTopIdentifier)(topId),
                  prevLine: codeL,
                  blanks: 0,
                  nonTops: (function () {
                      var $128 = Data_Eq.eq(eqCodeLine)(codeL)(new NonTop(str));
                      if ($128) {
                          return state.nonTops + 1 | 0;
                      };
                      return 0;
                  })(),
                  index: nextIndex,
                  codeLines: state.codeLines
              };
          };
      };
  };
  var endsWith = function (suffix) {
      var $135 = Data_String_CodeUnits.stripSuffix(suffix);
      return function ($136) {
          return Data_Maybe.isJust($135($136));
      };
  };
  var defaultRules = {
      linesAfterModule: 2,
      linesAfterImports: 2,
      linesBetweenBlocks: 2,
      linesBeforeSingleComment: 2,
      linesAfterSingleComment: 2
  };
  var declKeywords = Data_Functor.map(Data_Functor.functorArray)(Data_Function.flip(Data_Semigroup.append(Data_Semigroup.semigroupString))(" "))([ "derive", "instance", "infixr", "infixl", "foreign" ]);
  var getCodeLine = function (str) {
      if ("" === str) {
          return Empty.value;
      };
      if (startsWith("--")(str)) {
          return new SingleLineComment(str);
      };
      if (startsWith("{-")(str) && endsWith("-}")(str)) {
          return new MultiLineCommentSingle(str);
      };
      if (startsWith("{-")(str)) {
          return new MultiLineCommentStart(str);
      };
      if (endsWith("-}")(str)) {
          return new MultiLineCommentEnd(str);
      };
      if (startsWith("module ")(str)) {
          return new Module(str);
      };
      if (startsWith("import ")(str) && Data_String_CodeUnits.contains(" as ")(str)) {
          return new Import(str);
      };
      if (startsWith("import ")(str) && (Data_String_CodeUnits.contains(" (")(str) && Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean)))(Data_String_CodeUnits.contains)(" hiding")(str))) {
          return new Import(str);
      };
      if (startsWith("import ")(str)) {
          return new ImportOpen(str);
      };
      if (startsWithAny(typeKeywords)(str)) {
          return new Type(str);
      };
      if (startsWithAny(declKeywords)(str)) {
          return new Decl(str);
      };
      if (startsWith("foreign")(str)) {
          return new Foreign(str);
      };
      if (Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean)))(startsWith)(" ")(str)) {
          return new Fun(str);
      };
      if (Data_Boolean.otherwise) {
          return new NonTop(str);
      };
      throw new Error("Failed pattern match at TopLevel (line 125, column 1 - line 125, column 34): " + [ str.constructor.name ]);
  };

  // API
  var format = function (opts) {
      return function (text) {
          var lines = Data_Functor.map(Data_Functor.functorArray)(trimEnd)(Data_String_Common.split("\x0a")(text));
          var codeLines = Data_Functor.mapFlipped(Data_Functor.functorArray)(lines)(getCodeLine);
          var state = Data_Array.foldl(foldFormat(opts))(initState(codeLines))(codeLines);
          return Data_String_Common.joinWith("")(state.result);
      };
  };
  var formatDefault = format(defaultRules);
  exports["formatDefault"] = formatDefault;
  exports["defaultRules"] = defaultRules;
  exports["format"] = format;
  exports["main"] = main;
})(PS);
module.exports = PS["TopLevel"];
